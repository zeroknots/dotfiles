
snippet solheader "sol header"
	/*//////////////////////////////////////////////////////////////
                           ${1:sectionName}
	//////////////////////////////////////////////////////////////*/
	${0}


snippet solFunction "sol function"
		/// @title ${1:functionName}
		/// @notice 
		/// @dev 
		function ${1:functionName}(${2:params}) external returns(${3:returns}) {

		${0}
		}


snippet solpreamble "sol new preamble"
	// SPDX-License-Identifier: MIT
	pragma solidity 0.8.19;

snippet import "sol import"
	import {"${1:importName}"} from "${2:importPath}";


snippet solcontract "sol new contract"
	// SPDX-License-Identifier: MIT
	pragma solidity ^0.8.19;


	/// @title ${1:ContractName}
	/// @author zeroknots
	/// @notice ${3:ContractDescription}

	contract ${1:ContractName} {

		constructor() {
				${0}

		}

		function ${2:functionName}() external {

		}
	}


snippet forUnchecked "sol for loop"
	for (uint256 i; i < ${1:count}; i = i.uncheckedInc()) {
		${0}
	}

snippet commonImport "import common loop lib"
	import {LoopLib} from "Common.sol/src/Common.sol";
	using LoopLib for uint256;



snippet soltest "sol foundry test"
	// SPDX-License-Identifier: MIT
	pragma solidity ^0.8.19;

	import "forge-std/Test.sol";


	/// @title ${1:ContractName}
	/// @author zeroknots
	contract ${1:ContractName} is Test {

		function setUp()public {
				${0}

		}

		function ${2:functionName}() public {

		}
	}
